import cv2
import numpy as np
import os
import datetime
import pyodbc

# ====== C·∫§U H√åNH K·∫æT N·ªêI SQL SERVER ======
server = '.'  # ho·∫∑c '.\\SQLEXPRESS'
database = 'NhanDienKhuonMat'
driver = '{ODBC Driver 17 for SQL Server}'

def get_connection():
    return pyodbc.connect(
        f'DRIVER={driver};SERVER={server};DATABASE={database};Trusted_Connection=yes;'
    )

# ====== C√ÅC H√ÄM GHI (Kh√¥ng d√πng n·ªØa, logic ƒë∆∞a v√†o v√≤ng l·∫∑p) ======
# B·ªè 2 h√†m record_attendance v√† record_checkout
# v√¨ logic ki·ªÉm tra DB ph·ª©c t·∫°p h∆°n, c·∫ßn l√†m tr·ª±c ti·∫øp

# ====== NH·∫¨N DI·ªÜN ======
recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read(os.path.join(os.path.dirname(__file__), 'trainer', 'trainer.yml'))
faceCascade = cv2.CascadeClassifier(os.path.join(os.path.dirname(__file__), 'haarcascade_frontalface_default.xml'))
font = cv2.FONT_HERSHEY_SIMPLEX

def load_employee_names():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT Id, Name FROM Employees ORDER BY Id ASC")
    rows = cursor.fetchall()
    conn.close()
    # T·∫°o danh s√°ch t√™n, index l√† ID
    max_id = max([row[0] for row in rows]) if rows else 0
    names = ['Unknown'] * (max_id + 1)
    for emp_id, name in rows:
        names[emp_id] = name
    return names

names = load_employee_names()

# ====== CAMERA ======
cam = cv2.VideoCapture(0)
cam.set(3, 640)
cam.set(4, 480)
minW = 0.1 * cam.get(3)
minH = 0.1 * cam.get(4)

# =======================================================
# ====== BI·∫æN QU·∫¢N L√ù (LOGIC GI·ªêNG FILE STREAMLIT) ======
# =======================================================
COOLDOWN_SECONDS = 15  # (gi√¢y) B·ªè qua sau khi ghi s·ª± ki·ªán
MIN_WORK_SECONDS = 30 # (gi√¢y) Th·ªùi gian t·ªëi thi·ªÉu ƒë·ªÉ check-out
last_event_time = {}   # {emp_id: datetime_object}

# Gi·ªØ l·∫°i t√≠nh nƒÉng t·ª± ƒë·ªông check-out l√∫c 17h
CHECKOUT_TIME = datetime.time(23, 0, 0)
# =======================================================


print("\nüì∑ H·ªá th·ªëng nh·∫≠n di·ªán ƒëang ho·∫°t ƒë·ªông...")
print(f"H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông check-out v√† t·∫Øt l√∫c {CHECKOUT_TIME}.")

while True:
    ret, img = cam.read()
    if not ret:
        print("[L·ªñI] Kh√¥ng th·ªÉ ƒë·ªçc camera.")
        break

    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = faceCascade.detectMultiScale(gray, 1.2, 5, minSize=(int(minW), int(minH)))

    # L·∫•y th·ªùi gian 1 l·∫ßn cho ch√≠nh x√°c
    current_datetime = datetime.datetime.now()
    current_time = current_datetime.time()
    today = current_datetime.date()

    # === T·ª± ƒë·ªông check-out t·∫•t c·∫£ khi ƒë·∫øn 17h ===
    if current_time >= CHECKOUT_TIME:
        print(f"\n[INFO] ƒê√£ ƒë·∫øn {CHECKOUT_TIME}, t·ª± ƒë·ªông check-out cho c√°c nh√¢n vi√™n c√≤n l·∫°i...")
        try:
            conn_auto = get_connection()
            cursor_auto = conn_auto.cursor()
            # C·∫≠p nh·∫≠t TimeOut cho t·∫•t c·∫£ b·∫£n ghi h√¥m nay C√íN TR·ªêNG TimeOut
            query = "UPDATE Attendance SET TimeOut = ? WHERE Date = ? AND TimeOut IS NULL"
            cursor_auto.execute(query, (current_time.strftime("%H:%M:%S"), today))
            conn_auto.commit()
            conn_auto.close()
            print("[INFO] Check-out h√†ng lo·∫°t ho√†n t·∫•t.")
        except Exception as e:
            print(f"[L·ªñI] L·ªói khi auto-checkout: {e}")
        break # D·ª´ng v√≤ng l·∫∑p camera

    # === Nh·∫≠n di·ªán khu√¥n m·∫∑t ===
    for (x, y, w, h) in faces:
        id, confidence = recognizer.predict(gray[y:y + h, x:x + w])
        # print(f"ID: {id}, Confidence: {confidence:.2f}")
        if confidence < 38:
            name = names[id] if id < len(names) else "Unknown"
            cv2.putText(img, f"{name}", (x + 5, y - 5), font, 1, (255, 255, 255), 2)
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)

            # =======================================================
            # ====== LOGIC ƒêI·ªÇM DANH (GI·ªêNG FILE STREAMLIT) ======
            # =======================================================
            
            # 1. Ki·ªÉm tra Cooldown
            if id in last_event_time:
                seconds_since_last_event = (current_datetime - last_event_time[id]).total_seconds()
                if seconds_since_last_event < COOLDOWN_SECONDS:
                    continue # ƒêang trong cooldown, b·ªè qua, kh√¥ng x·ª≠ l√Ω

            # 2. N·∫øu kh√¥ng trong cooldown, ki·ªÉm tra DB ƒë·ªÉ quy·∫øt ƒë·ªãnh
            try:
                conn = get_connection()
                cursor = conn.cursor()
                time_now_str = current_datetime.strftime("%H:%M:%S")

                # T√¨m b·∫£n ghi M·ªöI NH·∫§T h√¥m nay c·ªßa ng∆∞·ªùi n√†y
                cursor.execute("SELECT Id, TimeIn, TimeOut FROM Attendance WHERE EmpId = ? AND Date = ? ORDER BY Id DESC", id, today)
                rec = cursor.fetchone()

                if rec is None:
                    # TR∆Ø·ªúNG H·ª¢P 1: CH∆ØA C√ì B·∫¢N GHI N√ÄO H√îM NAY -> CHECK-IN
                    cursor.execute("INSERT INTO Attendance (EmpId, Date, TimeIn) VALUES (?, ?, ?)", id, today, time_now_str)
                    conn.commit()
                    print(f"‚úÖ CHECK-IN: {name} (ID {id}) l√∫c {time_now_str}")
                    last_event_time[id] = current_datetime # C·∫≠p nh·∫≠t cooldown

                elif rec.TimeOut is None or str(rec.TimeOut).strip() == "":
                    # TR∆Ø·ªúNG H·ª¢P 2: ƒê√É CHECK-IN, CH∆ØA CHECK-OUT -> X·ª¨ L√ù CHECK-OUT
                    
                    # Chuy·ªÉn TimeIn (t·ª´ DB) sang datetime object
                    time_in_obj = datetime.datetime.strptime(str(rec.TimeIn), "%H:%M:%S").time()
                    time_in_datetime = datetime.datetime.combine(today, time_in_obj)
                    
                    duration_seconds = (current_datetime - time_in_datetime).total_seconds()

                    if duration_seconds > MIN_WORK_SECONDS:
                        # ƒê·ªß th·ªùi gian l√†m vi·ªác -> CHECK-OUT
                        cursor.execute("UPDATE Attendance SET TimeOut = ? WHERE Id = ?", time_now_str, rec.Id)
                        conn.commit()
                        print(f"‚úÖ CHECK-OUT: {name} (ID {id}) l√∫c {time_now_str}")
                        last_event_time[id] = current_datetime # C·∫≠p nh·∫≠t cooldown
                    else:
                        # Ch∆∞a ƒë·ªß th·ªùi gian, ch·ªâ l√† v·∫´n ƒë·ª©ng tr∆∞·ªõc camera
                        # Kh√¥ng l√†m g√¨ c·∫£
                        pass 

                else:
                    # TR∆Ø·ªúNG H·ª¢P 3: ƒê√É C√ì CHECK-IN V√Ä CHECK-OUT (ƒê√É HO√ÄN TH√ÄNH CA) -> CHECK-IN (CA M·ªöI)
                    cursor.execute("INSERT INTO Attendance (EmpId, Date, TimeIn) VALUES (?, ?, ?)", id, today, time_now_str)
                    conn.commit()
                    print(f"‚úÖ CHECK-IN (Ca m·ªõi): {name} (ID {id}) l√∫c {time_now_str}")
                    last_event_time[id] = current_datetime # C·∫≠p nh·∫≠t cooldown
                
                conn.close()
            except Exception as e:
                print(f"[L·ªñI] L·ªói ghi DB: {e}")
            # =======================================================

        else:
            # Unknown
            cv2.putText(img, "Unknown", (x + 5, y - 5), font, 1, (255, 255, 255), 2)
            cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 2)

    cv2.imshow('Camera - Cham Cong Tu Dong', img)
    k = cv2.waitKey(10) & 0xff
    if k == 27:  # ESC ƒë·ªÉ tho√°t
        break

# ====== D·ªåN D·∫∏P ======
print("\n[INFO] ƒê√≥ng camera v√† k·∫øt th√∫c ch∆∞∆°ng tr√¨nh.")
cam.release()
cv2.destroyAllWindows()