import streamlit as st
import pandas as pd
import pyodbc
import datetime
import os
import cv2
import numpy as np
from PIL import Image
import shutil # Th∆∞ vi·ªán ƒë·ªÉ x√≥a th∆∞ m·ª•c
import time   # Th∆∞ vi·ªán ƒë·ªÉ t·∫°o ƒë·ªô tr·ªÖ
import base64 # ui
# ==============================
#  C·∫§U H√åNH K·∫æT N·ªêI SQL SERVER
# ==============================
server = '.'
database = 'NhanDienKhuonMat'
driver = '{ODBC Driver 17 for SQL Server}'

def get_connection():
    return pyodbc.connect(
        f'DRIVER={driver};SERVER={server};DATABASE={database};Trusted_Connection=yes;'
    )

# ==============================
#  C√ÅC H√ÄM L·∫§Y D·ªÆ LI·ªÜU
# ==============================
def get_employees():
    conn = get_connection()
    df = pd.read_sql("SELECT * FROM Employees", conn)
    conn.close()
    return df

def get_attendance():
    conn = get_connection()
    df = pd.read_sql("SELECT * FROM Attendance", conn)
    conn.close()
    return df

# ==============================
#  C√ÅC H√ÄM H·ªñ TR·ª¢ (T·ª™ FILE 01 V√Ä 02)
# ==============================
DATASET_DIR = "dataset"
TRAINER_DIR = "trainer"
TRAINER_FILE = os.path.join(TRAINER_DIR, 'trainer.yml')
FACE_DETECTOR = cv2.CascadeClassifier(os.path.join(os.path.dirname(__file__), 'haarcascade_frontalface_default.xml'))

def save_cropped_face(image_bytes, folder_name, user_id, count):
    """
    X·ª≠ l√Ω ·∫£nh t·ª´ st.camera_input, t√¨m m·∫∑t, crop, chuy·ªÉn x√°m v√† l∆∞u.
    Folder_name b√¢y gi·ªù c√≥ d·∫°ng 'nhanvien_{ID}'.
    ƒê√£ b·ªè l∆∞u ·∫£nh khi l·ªói.
    """
    try:
        # ƒê·ªçc ·∫£nh b·∫±ng cv2.imdecode
        image_bytes_data = image_bytes.getvalue()
        img_numpy_cv = cv2.imdecode(np.frombuffer(image_bytes_data, np.uint8), cv2.IMREAD_COLOR)

        if img_numpy_cv is None:
            st.error("L·ªói : Kh√¥ng th·ªÉ gi·∫£i m√£ d·ªØ li·ªáu ·∫£nh t·ª´ camera.")
            return None

        gray = cv2.cvtColor(img_numpy_cv, cv2.COLOR_BGR2GRAY)
        gray_eq = cv2.equalizeHist(gray) # C√¢n b·∫±ng s√°ng

        # TƒÉng minSize l√™n (80, 80)
        faces = FACE_DETECTOR.detectMultiScale(
            gray_eq,
            scaleFactor=1.2,
            minNeighbors=4,
            minSize=(80, 80) # <<< TƒÇNG K√çCH TH∆Ø·ªöC T·ªêI THI·ªÇU
        )

        if len(faces) == 0:
            st.warning("Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t trong ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.")           
            return None # Tr·∫£ v·ªÅ None n·∫øu th·∫•t b·∫°i

        # Ch·ªâ l·∫•y khu√¥n m·∫∑t ƒë·∫ßu ti√™n
        (x, y, w, h) = faces[0]

        # In ra k√≠ch th∆∞·ªõc ƒë·ªÉ ki·ªÉm tra
        print(f"Detected face box: x={x}, y={y}, w={w}, h={h}")

        # Ki·ªÉm tra k√≠ch th∆∞·ªõc h·ª£p l·ªá tr∆∞·ªõc khi crop
        if w < 30 or h < 30: # N·∫øu v·∫´n qu√° nh·ªè -> coi nh∆∞ l·ªói
             st.warning(f"Khu√¥n m·∫∑t t√¨m th·∫•y qu√° nh·ªè (w={w}, h={h}). Vui l√≤ng th·ª≠ l·∫°i.")
             return None

        face_img = gray[y:y + h, x:x + w] # L∆∞u ·∫£nh g·ªëc (ch∆∞a c√¢n b·∫±ng)

        save_dir = os.path.join(DATASET_DIR, folder_name) # folder_name = f"nhanvien_{user_id}"
        os.makedirs(save_dir, exist_ok=True)

        filename = os.path.join(save_dir, f"User.{user_id}.{count}.jpg")
        cv2.imwrite(filename, face_img)

        return filename

    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")
        import traceback
        st.error(traceback.format_exc())
        return None

def train_model():
    """
    Hu·∫•n luy·ªán m√¥ h√¨nh t·ª´ th∆∞ m·ª•c 'dataset' v√† l∆∞u ra file .yml
    """
    try:
        recognizer = cv2.face.LBPHFaceRecognizer_create()

        def getImagesAndLabels(path):
            imagePaths = []
            for root, dirs, files in os.walk(path):
                for file in files:
                    if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                        imagePaths.append(os.path.join(root, file))

            faceSamples = []
            ids = []

            for imagePath in imagePaths:
                try:
                    PIL_img = Image.open(imagePath).convert('L')
                    img_numpy = np.array(PIL_img, 'uint8')
                    filename = os.path.basename(imagePath)
                    id_str = filename.split('.')[1]
                    id = int(id_str)
                    faceSamples.append(img_numpy)
                    ids.append(id)
                except Exception as e:
                    st.warning(f"B·ªè qua ·∫£nh l·ªói: {imagePath} ({e})")

            return faceSamples, ids

        st.info("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh... Vui l√≤ng ch·ªù.")
        faces, ids = getImagesAndLabels(DATASET_DIR)

        if len(faces) == 0:
            st.error("Kh√¥ng c√≥ ·∫£nh n√†o ƒë·ªÉ hu·∫•n luy·ªán. Vui l√≤ng th√™m ·∫£nh.")
            return

        recognizer.train(faces, np.array(ids))
        os.makedirs(TRAINER_DIR, exist_ok=True)
        recognizer.write(TRAINER_FILE)

        st.success(f"Hu·∫•n luy·ªán th√†nh c√¥ng! ({len(np.unique(ids))} ng∆∞·ªùi).")

    except Exception as e:
        st.error(f"L·ªói khi hu·∫•n luy·ªán: {e}")


# ==============================
#  UI STREAMLIT
st.set_page_config(page_title="H·ªá th·ªëng ƒëi·ªÉm danh", layout="wide")
st.title(" H·ªÜ TH·ªêNG ƒêI·ªÇM DANH NH√ÇN VI√äN")
# ================================
# Kh·ªüi t·∫°o session_state (B·ªô nh·ªõ wed)
if 'photo_count' not in st.session_state:
    st.session_state.photo_count = 0
if 'new_emp_id' not in st.session_state:
    st.session_state.new_emp_id = None
if 'run_camera' not in st.session_state:
    st.session_state.run_camera = False
if 'last_event_time' not in st.session_state:
    st.session_state.last_event_time = {}

menu = st.sidebar.selectbox(
    "Ch·ªçn ch·ª©c nƒÉng",
    ["Xem nh√¢n vi√™n", "Th√™m nh√¢n vi√™n", "Xem l·ªãch s·ª≠ ƒëi·ªÉm danh", "Th·ªëng k√™ t·ªïng h·ª£p", "ƒêi·ªÉm danh b·∫±ng camera"]
)

# -------------------------------
#  XEM DANH S√ÅCH NH√ÇN VI√äN (S·ª¨A/X√ìA)
# -------------------------------
if menu == "Xem nh√¢n vi√™n":
    st.header(" Danh s√°ch nh√¢n vi√™n")
    df_emp = get_employees()
    if df_emp.empty:
        st.warning("Ch∆∞a c√≥ nh√¢n vi√™n n√†o trong h·ªá th·ªëng.")
    else:
        st.dataframe(df_emp, use_container_width=True)

    if not df_emp.empty:
        st.subheader("Qu·∫£n l√Ω nh√¢n vi√™n")

        selected_name = st.selectbox(
            "Ch·ªçn nh√¢n vi√™n ƒë·ªÉ qu·∫£n l√Ω",
            df_emp["Name"],
            index=None,
            placeholder="Ch·ªçn m·ªôt nh√¢n vi√™n..."
        )

        if selected_name:
            emp_details = df_emp[df_emp["Name"] == selected_name].to_dict('records')[0]
            emp_id = int(emp_details["Id"])

            # === CH·ª®C NƒÇNG S·ª¨A ===
            with st.expander("‚úèÔ∏è S·ª≠a th√¥ng tin nh√¢n vi√™n"):
                with st.form("edit_form"):
                    st.write(f"ƒêang s·ª≠a cho: **{emp_details['Name']}** (ID: {emp_id})")
                    new_name = st.text_input("H·ªç t√™n", value=emp_details['Name'])
                    new_dept = st.text_input("Ph√≤ng ban", value=emp_details['Department'])

                    submitted_edit = st.form_submit_button("C·∫≠p nh·∫≠t th√¥ng tin")

                    if submitted_edit:
                        if not new_name or not new_dept:
                            st.error("T√™n v√† Ph√≤ng ban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")
                        else:
                            try:
                                conn = get_connection()
                                cursor = conn.cursor()
                                cursor.execute("UPDATE Employees SET Name = ?, Department = ? WHERE Id = ?", (new_name, new_dept, emp_id))
                                conn.commit()
                                conn.close()
                                st.success(f"ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin cho {new_name}")
                                st.rerun()
                            except Exception as e:
                                st.error(f"L·ªói khi c·∫≠p nh·∫≠t: {e}")

            # === CH·ª®C NƒÇNG X√ìA ===
            with st.expander("üóëÔ∏è X√≥a nh√¢n vi√™n"):
                st.warning(f"**C·∫¢NH B√ÅO:** B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a **{emp_details['Name']}**? To√†n b·ªô l·ªãch s·ª≠ ƒëi·ªÉm danh v√† ·∫£nh hu·∫•n luy·ªán c·ªßa ng∆∞·ªùi n√†y s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn.")

                confirm_check = st.checkbox("T√¥i x√°c nh·∫≠n mu·ªën x√≥a")

                if st.button("X√ìA Vƒ®NH VI·ªÑN", disabled=not confirm_check, type="primary"):
                    try:
                        # 1. X√≥a ·∫£nh avatar (n·∫øu c√≥)
                        if emp_details['PhotoPath'] and os.path.exists(emp_details['PhotoPath']):
                            os.remove(emp_details['PhotoPath'])

                        # 2. X√ìA TH∆Ø M·ª§C THEO ID
                        folder_name_to_delete = f"nhanvien_{emp_id}"
                        dir_to_delete = os.path.join(DATASET_DIR, folder_name_to_delete)

                        if os.path.exists(dir_to_delete):
                            shutil.rmtree(dir_to_delete)
                            st.info(f"ƒê√£ x√≥a th∆∞ m·ª•c ·∫£nh: {dir_to_delete}")
                        else:
                            st.warning(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ·∫£nh {dir_to_delete}. B·ªè qua b∆∞·ªõc x√≥a ·∫£nh.")

                        # 3. X√≥a d·ªØ li·ªáu CSDL
                        conn = get_connection()
                        cursor = conn.cursor()
                        cursor.execute("DELETE FROM Attendance WHERE EmpId = ?", (emp_id,))
                        cursor.execute("DELETE FROM Employees WHERE Id = ?", (emp_id,))
                        conn.commit()
                        conn.close()

                        st.success(f"ƒê√£ x√≥a vƒ©nh vi·ªÖn {emp_details['Name']} (ID: {emp_id}) kh·ªèi CSDL.")
                        st.warning("M√¥ h√¨nh ƒë√£ c≈©. Vui l√≤ng hu·∫•n luy·ªán l·∫°i (·ªü menu 'Th√™m nh√¢n vi√™n').")
                        st.rerun()
                    except Exception as e:
                        st.error(f"L·ªói khi x√≥a: {e}")

            # === L·ªäCH S·ª¨ ƒêI·ªÇM DANH ===
            st.subheader(f"L·ªãch s·ª≠ ƒëi·ªÉm danh c·ªßa {selected_name}")
            df_att = get_attendance()
            df_att = df_att[df_att["EmpId"] == emp_id]
            if not df_att.empty:
                df_att = df_att.copy()
                df_att["WorkHours"] = (
                    pd.to_datetime(df_att["TimeOut"].astype(str), errors='coerce') - pd.to_datetime(df_att["TimeIn"].astype(str), errors='coerce')
                ).dt.total_seconds() / 3600
                st.dataframe(df_att, use_container_width=True)
            else:
                st.info("Nh√¢n vi√™n n√†y ch∆∞a c√≥ l·ªãch s·ª≠ ƒëi·ªÉm danh.")

# -------------------------------
#  TH√äM NH√ÇN VI√äN (S·ª¨A L·∫†I THEO ID)
# -------------------------------
elif menu == "Th√™m nh√¢n vi√™n":
    st.header(" B∆∞·ªõc 1: Th√™m th√¥ng tin nh√¢n vi√™n")

    with st.form("form_add_emp"):
        name = st.text_input(" H·ªç t√™n nh√¢n vi√™n")
        department = st.text_input(" Ph√≤ng ban")
        photo = st.file_uploader(" ·∫¢nh ƒë·∫°i di·ªán (·∫£nh avatar, kh√¥ng d√πng hu·∫•n luy·ªán)", type=["jpg", "png", "jpeg"])
        submitted = st.form_submit_button("L∆∞u nh√¢n vi√™n")

        if submitted:
            if not name or not department:
                st.error(" Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß T√™n v√† Ph√≤ng ban.")
            else:
                photo_path = None
                if photo:
                    os.makedirs("photos", exist_ok=True)
                    safe_name = name.replace(' ', '_')
                    photo_path = f"photos/{safe_name}.jpg"
                    with open(photo_path, "wb") as f:
                        f.write(photo.getbuffer())

                try:
                    conn = get_connection()
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT INTO Employees (Name, Department, PhotoPath)
                        OUTPUT INSERTED.Id
                        VALUES (?, ?, ?)
                    """, (name, department, photo_path))

                    new_id = cursor.fetchone()[0]
                    conn.commit()
                    conn.close()

                    st.success(f" ƒê√£ th√™m nh√¢n vi√™n: {name} (ID: {new_id})")

                    st.session_state.new_emp_id = new_id
                    st.session_state.photo_count = 0

                except Exception as e:
                    st.error(f"L·ªói khi th√™m nh√¢n vi√™n v√†o DB: {e}")

    # === B∆Ø·ªöC 2: CH·ª§P ·∫¢NH (S·ª¨A L·∫†I THEO ID) ===
    if st.session_state.new_emp_id:
        emp_id_for_photo = st.session_state.new_emp_id
        folder_name_for_photo = f"nhanvien_{emp_id_for_photo}"

        st.header(f" B∆∞·ªõc 2: Ch·ª•p ·∫£nh hu·∫•n luy·ªán cho ID: {emp_id_for_photo} (Th∆∞ m·ª•c: {folder_name_for_photo})")
        st.info(f"ƒê√£ ch·ª•p: {st.session_state.photo_count} / 5 ·∫£nh.")

        st.markdown("**H∆∞·ªõng d·∫´n:**")
        st.markdown("1. ƒê·∫£m b·∫£o ƒë·ªß s√°ng, khu√¥n m·∫∑t r√µ r√†ng.")
        st.markdown("2. **Thay ƒë·ªïi g√≥c m·∫∑t (nh√¨n th·∫≥ng, h∆°i nghi√™ng tr√°i/ph·∫£i) *tr∆∞·ªõc khi* nh·∫•n n√∫t ch·ª•p.**")
        st.markdown("3. Nh·∫•n n√∫t 'Take photo' b√™n d∆∞·ªõi.")

        img_file_buffer = st.camera_input("Ch·ª•p ·∫£nh hu·∫•n luy·ªán")

        if img_file_buffer is not None and st.session_state.photo_count < 5:
            saved_file_path = save_cropped_face(
                image_bytes=img_file_buffer,
                folder_name=folder_name_for_photo, # D√πng t√™n th∆∞ m·ª•c m·ªõi
                user_id=emp_id_for_photo,
                count=st.session_state.photo_count + 1
            )

            if saved_file_path:
                st.session_state.photo_count += 1
                st.success(f"ƒê√£ l∆∞u ·∫£nh {st.session_state.photo_count}/5: {saved_file_path}")
                time.sleep(1) # Th√™m ƒë·ªô tr·ªÖ(s)
                st.rerun()

    # === B∆Ø·ªöC 3: HU·∫§N LUY·ªÜN ===
    if st.session_state.photo_count >= 5:
        st.header(" B∆∞·ªõc 3: Ho√†n t·∫•t hu·∫•n luy·ªán")
        st.success("ƒê√£ ch·ª•p ƒë·ªß 5 ·∫£nh!")
        if st.button("B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán"):
            train_model()
            st.session_state.new_emp_id = None
            st.session_state.photo_count = 0

    # Cho ph√©p hu·∫•n luy·ªán l·∫°i b·∫•t c·ª© l√∫c n√†o
    st.divider()
    st.header("Hu·∫•n luy·ªán l·∫°i m√¥ h√¨nh (T√πy ch·ªçn)")
    st.warning("N·∫øu b·∫°n v·ª´a X√ìA nh√¢n vi√™n, b·∫°n n√™n ch·∫°y l·∫°i hu·∫•n luy·ªán.")
    if st.button("Hu·∫•n luy·ªán l·∫°i t·∫•t c·∫£ ·∫£nh trong 'dataset'"):
        train_model()

# -------------------------------
#  XEM L·ªäCH S·ª¨ ƒêI·ªÇM DANH
# -------------------------------
elif menu == "Xem l·ªãch s·ª≠ ƒëi·ªÉm danh":
    st.header(" L·ªãch s·ª≠ ƒëi·ªÉm danh")
    df_att = get_attendance()
    if df_att.empty:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh.")
    else:
        df_emp = get_employees()
        df = df_att.merge(df_emp[['Id', 'Name']], left_on='EmpId', right_on='Id', how='left')
        df = df.copy()

        df["WorkHours"] = (
            pd.to_datetime(df["TimeOut"].astype(str), errors='coerce') - pd.to_datetime(df["TimeIn"].astype(str), errors='coerce')
        ).dt.total_seconds() / 3600

        df = df.fillna(0) # Hi·ªÉn th·ªã 0 thay v√¨ NaN
        df = df[["Name", "Date", "TimeIn", "TimeOut", "WorkHours"]]

        date_filter = st.date_input("Ch·ªçn ng√†y", datetime.date.today())
        df_filtered = df[pd.to_datetime(df["Date"]).dt.date == date_filter]

        if df_filtered.empty:
            st.info(f"Kh√¥ng c√≥ ƒëi·ªÉm danh n√†o trong ng√†y {date_filter}.")
        else:
            st.dataframe(df_filtered, use_container_width=True)

# -------------------------------
#  TH·ªêNG K√ä T·ªîNG H·ª¢P
# -------------------------------
elif menu == "Th·ªëng k√™ t·ªïng h·ª£p":
    st.header(" Th·ªëng k√™ t·ªïng th·ªùi gian l√†m vi·ªác")
    df_att = get_attendance()
    df_emp = get_employees()

    if df_att.empty:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh ƒë·ªÉ th·ªëng k√™.")
    else:
        df = df_att.merge(df_emp[['Id', 'Name']], left_on='EmpId', right_on='Id', how='left')

        time_diff_seconds = (
            pd.to_datetime(df["TimeOut"].astype(str), errors='coerce') - 
            pd.to_datetime(df["TimeIn"].astype(str), errors='coerce')
        ).dt.total_seconds()

        df["WorkHours"] = time_diff_seconds / 3600
        
        df["WorkMinutes"] = time_diff_seconds / 60

        df = df.fillna(0) 

        summary = df.groupby("Name").agg(
            WorkHours=('WorkHours', 'sum'),      
            WorkMinutes=('WorkMinutes', 'sum') 
        ).reset_index()

        summary['T·ªïng Gi·ªù'] = (summary['WorkMinutes'] // 60).astype(int)
        summary['T·ªïng Ph√∫t'] = (summary['WorkMinutes'] % 60).astype(int)
        summary['T·ªïng th·ªùi gian'] = summary['T·ªïng Gi·ªù'].astype(str) + " gi·ªù " + summary['T·ªïng Ph√∫t'].astype(str) + " ph√∫t"
        
        summary = summary.sort_values(by="WorkHours", ascending=False)
        
        st.bar_chart(summary.set_index("Name")['WorkHours'])
        
        st.dataframe(
            summary[['Name', 'T·ªïng th·ªùi gian', 'WorkHours']],
            use_container_width=True,
            column_config={"WorkHours": "T·ªïng gi·ªù (d·∫°ng s·ªë)"} 
        )
        
        st.download_button(
            label="‚¨áÔ∏è T·∫£i b√°o c√°o Excel",
            # Xu·∫•t file c√≥ c·∫£ c·ªôt "T·ªïng th·ªùi gian"
            data=summary[['Name', 'T·ªïng th·ªùi gian', 'WorkHours', 'WorkMinutes']].to_csv(index=False).encode("utf-8"),
            file_name=f"ThongKe_{datetime.date.today()}.csv",
            mime="text/csv"
        )

# -------------------------------
#  ƒêI·ªÇM DANH B·∫∞NG CAMERA (LOGIC FILE 03 - WEB)
# -------------------------------

def load_employee_names_dict():
    """
    Tr·∫£ v·ªÅ m·ªôt danh s√°ch 'names' m√† index c·ªßa list
    kh·ªõp v·ªõi 'Id' trong database.
    """
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT Id, Name FROM Employees ORDER BY Id ASC")
    rows = cursor.fetchall()
    conn.close()

    max_id = 0
    if rows:
        max_id = max([row[0] for row in rows])

    names = ['Unknown'] * (max_id + 1)

    for emp_id, name in rows:
        # ƒê·∫£m b·∫£o emp_id n·∫±m trong kho·∫£ng index h·ª£p l·ªá
        if 0 <= emp_id < len(names):
             names[emp_id] = name
        else:
            st.warning(f"Employee ID {emp_id} kh√¥ng h·ª£p l·ªá cho danh s√°ch names (ƒë·ªô d√†i {len(names)}).")

    return names

def opencv_attendance_streamlit():
    st.header("ƒêi·ªÉm danh b·∫±ng nh·∫≠n di·ªán khu√¥n m·∫∑t (OpenCV)")

    COOLDOWN_SECONDS = 15 # th·ªùi gian check in ca m·ªõi 
    MIN_WORK_SECONDS = 30 # th·ªùi gian l√†m vi·ªác t·ªëi thi·ªÉu ƒë·ªÉ check out
    NGUONG_TIN_CAY = 43 # Ng∆∞·ª°ng tin c·∫≠y (th·∫•p h∆°n l√† t·ªët h∆°n

    col1, col2 = st.columns(2)
    with col1:
        if st.button("B·∫Øt ƒë·∫ßu ƒëi·ªÉm danh"):
            st.session_state.run_camera = True
    with col2:
        if st.button("D·ª´ng ƒëi·ªÉm danh"):
            st.session_state.run_camera = False

    FRAME_WINDOW = st.image([])

    if st.session_state.run_camera:
        try:
            # Ki·ªÉm tra file trainer c√≥ t·ªìn t·∫°i kh√¥ng
            if not os.path.exists(TRAINER_FILE):
                 st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file hu·∫•n luy·ªán '{TRAINER_FILE}'. B·∫°n ƒë√£ hu·∫•n luy·ªán m√¥ h√¨nh ch∆∞a?")
                 st.session_state.run_camera = False
                 return

            recognizer = cv2.face.LBPHFaceRecognizer_create()
            recognizer.read(TRAINER_FILE)
            faceCascade = FACE_DETECTOR
            font = cv2.FONT_HERSHEY_SIMPLEX
            names = load_employee_names_dict()
            cam = cv2.VideoCapture(0)
            if not cam.isOpened(): # Ki·ªÉm tra camera c√≥ m·ªü ƒë∆∞·ª£c kh√¥ng
                 st.error("L·ªói: Kh√¥ng th·ªÉ m·ªü camera.")
                 st.session_state.run_camera = False
                 return
            cam.set(3, 640)
            cam.set(4, 480)
            minW = 0.1 * cam.get(3)
            minH = 0.1 * cam.get(4)
        except Exception as e:
            st.error(f"L·ªói kh·ªüi ƒë·ªông camera ho·∫∑c m√¥ h√¨nh: {e}. B·∫°n ƒë√£ hu·∫•n luy·ªán m√¥ h√¨nh ch∆∞a?")
            st.session_state.run_camera = False
            return

        st.info("Nh·∫•n n√∫t 'D·ª´ng ƒëi·ªÉm danh' ƒë·ªÉ k·∫øt th√∫c.")

        while st.session_state.run_camera:
            ret, img = cam.read()
            if not ret:
                st.error("Kh√¥ng th·ªÉ ƒë·ªçc camera.")
                st.session_state.run_camera = False
                break

            img_display = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            faces = faceCascade.detectMultiScale(gray, 1.2, 5, minSize=(int(minW), int(minH)))

            current_time = datetime.datetime.now()
            today = current_time.date()

            for (x, y, w, h) in faces:
                id, confidence = recognizer.predict(gray[y:y + h, x:x + w])

                # Ki·ªÉm tra id c√≥ h·ª£p l·ªá kh√¥ng tr∆∞·ªõc khi l·∫•y t√™n
                name = "Unknown"
                if id < len(names):
                     name = names[id]
                else:
                     st.warning(f"ID {id} tr·∫£ v·ªÅ t·ª´ recognizer n·∫±m ngo√†i kho·∫£ng c·ªßa danh s√°ch names (ƒë·ªô d√†i {len(names)}).")


                if confidence < NGUONG_TIN_CAY and name != "Unknown": # Ch·ªâ x·ª≠ l√Ω n·∫øu ƒë·ªß tin c·∫≠y V√Ä t√™n kh√¥ng ph·∫£i Unknown
                    # ƒê·ªß tin c·∫≠y
                    cv2.putText(img_display, f"{name}", (x + 5, y - 5), font, 1, (255, 255, 255), 2)
                    cv2.rectangle(img_display, (x, y), (x + w, y + h), (0, 255, 0), 2) # Xanh l√°

                    # Logic ƒëi·ªÉm danh
                    if id in st.session_state.last_event_time:
                        seconds_since_last_event = (current_time - st.session_state.last_event_time[id]).total_seconds()
                        if seconds_since_last_event < COOLDOWN_SECONDS:
                            continue

                    try:
                        conn = get_connection()
                        cursor = conn.cursor()
                        time_now_str = current_time.strftime("%H:%M:%S")
                        cursor.execute("SELECT Id, TimeIn, TimeOut FROM Attendance WHERE EmpId = ? AND Date = ? ORDER BY Id DESC", id, today)
                        rec = cursor.fetchone()

                        if rec is None:
                            # 1. Check-in
                            cursor.execute("INSERT INTO Attendance (EmpId, Date, TimeIn) VALUES (?, ?, ?)", id, today, time_now_str)
                            conn.commit()
                            st.success(f"Check-in: {name} l√∫c {time_now_str}")
                            st.session_state.last_event_time[id] = current_time
                        elif rec.TimeOut is None or str(rec.TimeOut).strip() == "":
                            # 2. Check-out
                            time_in_str = str(rec.TimeIn)
                            # Th√™m try-except ƒë·ªÉ b·∫Øt l·ªói format time
                            try:
                                time_in_obj = datetime.datetime.strptime(time_in_str, "%H:%M:%S").time()
                                time_in_datetime = datetime.datetime.combine(today, time_in_obj)
                                duration_seconds = (current_time - time_in_datetime).total_seconds()
                                if duration_seconds > MIN_WORK_SECONDS:
                                    cursor.execute("UPDATE Attendance SET TimeOut = ? WHERE Id = ?", time_now_str, rec.Id)
                                    conn.commit()
                                    st.success(f"Check-out: {name} l√∫c {time_now_str}")
                                    st.session_state.last_event_time[id] = current_time
                            except ValueError:
                                st.error(f"L·ªói format th·ªùi gian TimeIn t·ª´ DB: '{time_in_str}'")

                        else:
                            # 3. Check-in (ca m·ªõi)
                            cursor.execute("INSERT INTO Attendance (EmpId, Date, TimeIn) VALUES (?, ?, ?)", id, today, time_now_str)
                            conn.commit()
                            st.success(f"Check-in (new): {name} l√∫c {time_now_str}")
                            st.session_state.last_event_time[id] = current_time
                        conn.close()
                    except Exception as e:
                        st.error(f"L·ªói ghi DB: {e}")
                else:
                    # Kh√¥ng ƒë·ªß tin c·∫≠y ho·∫∑c id kh√¥ng h·ª£p l·ªá
                    cv2.putText(img_display, "Unknown", (x + 5, y - 5), font, 1, (255, 255, 255), 2)
                    cv2.rectangle(img_display, (x, y), (x + w, y + h), (255, 0, 0), 2) 

            # Hi·ªÉn th·ªã ·∫£nh l√™n web
            FRAME_WINDOW.image(img_display)

        # D·ªçn d·∫πp khi v√≤ng l·∫∑p d·ª´ng
        cam.release()
        # cv2.destroyAllWindows() # Kh√¥ng c·∫ßn d√≤ng n√†y trong Streamlit
        if 'run_camera' in st.session_state:
            if st.session_state.run_camera == False:
                 st.success("ƒê√£ d·ª´ng camera!")

# === X·ª¨ L√ù CH·ªåN MENU ===
if menu == "ƒêi·ªÉm danh b·∫±ng camera":
    opencv_attendance_streamlit()